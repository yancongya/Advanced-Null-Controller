name: 同步dev分支到main分支

# 手动触发机制
on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: '自定义提交消息（可选）'
        required: false
        default: '同步dev分支的更改到main分支'
        type: string

# 权限配置
permissions:
  contents: write
  actions: read

jobs:
  sync-branches:
    name: 同步分支
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 配置Git用户
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: 执行分支同步
        run: |
          echo "🚀 开始同步dev分支到main分支"
          echo "工作流触发分支: ${{ github.ref_name }}"

          # 确保在main分支
          git checkout main
          echo "✅ 当前在main分支: $(git branch --show-current)"

          # 创建备份标签
          BACKUP_TAG="backup-main-$(date +%Y%m%d-%H%M%S)"
          git tag $BACKUP_TAG
          echo "✅ 创建备份标签: $BACKUP_TAG"

          # 从dev分支合并，但排除特定文件夹
          echo ""
          echo "📂 开始从dev分支同步文件..."

          # 切换到dev分支查看内容
          git checkout dev
          echo "dev分支内容:"
          ls -la

          # 使用git checkout选择性合并文件
          git checkout main

          # 逐个同步文件和文件夹（排除assets和dev文件夹）
          git checkout dev -- . 2>/dev/null || true

          # 删除不需要的文件夹
          if [ -d "assets" ]; then
            rm -rf assets
            echo "❌ 已排除: assets/ 文件夹"
          fi

          if [ -d "dev" ]; then
            rm -rf dev
            echo "❌ 已排除: dev/ 文件夹"
          fi

          # 恢复main分支的.gitignore
          git checkout HEAD -- .gitignore 2>/dev/null || true
          echo "✅ 保留main分支的.gitignore配置"

          echo ""
          echo "📋 同步后的main分支内容:"
          ls -la
      
      - name: 检查更改并提交
        run: |
          echo ""
          echo "🔍 检查是否有更改需要提交..."

          # 添加所有更改
          git add .

          # 检查是否有更改
          if git diff --cached --quiet; then
            echo "ℹ️ 没有检测到需要同步的更改"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo "✅ 检测到需要同步的更改:"
            git status --porcelain
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi

      - name: 提交并推送更改
        if: env.HAS_CHANGES == 'true'
        run: |
          echo "📝 提交更改到main分支..."

          # 使用自定义提交消息或默认消息
          COMMIT_MSG="${{ github.event.inputs.commit_message }}"
          if [ -z "$COMMIT_MSG" ]; then
            COMMIT_MSG="同步dev分支的更改到main分支"
          fi

          # 创建详细的提交消息
          FULL_MSG="$COMMIT_MSG

          🔄 同步信息:
          - 源分支: dev → main
          - 同步时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - 触发者: ${{ github.actor }}
          - 排除文件夹: assets/, dev/
          - 工作流: ${{ github.run_id }}"

          # 提交更改
          git commit -m "$FULL_MSG"
          echo "✅ 已提交更改到main分支"

          # 推送到远程仓库
          echo "📤 推送更改到远程仓库..."
          git push origin main
          echo "✅ 已推送main分支更改到远程仓库"

      - name: 输出同步结果
        if: always()
        run: |
          echo ""
          echo "🎉 同步操作完成！"
          echo "================================"

          if [ "$HAS_CHANGES" == "true" ]; then
            echo "✅ 同步成功！dev分支的更改已同步到main分支"
            echo "📝 提交消息: ${{ github.event.inputs.commit_message }}"
            echo "🔗 查看main分支: https://github.com/${{ github.repository }}/tree/main"
          else
            echo "ℹ️ 没有需要同步的更改，两个分支已保持同步"
          fi

          echo ""
          echo "📊 分支状态总结:"
          git checkout main 2>/dev/null || true
          echo "main分支最新提交: $(git log -1 --oneline)"
          echo "main分支文件列表:"
          ls -la

          echo ""
          echo "🎯 同步策略:"
          echo "- ✅ 已同步: 除assets/和dev/文件夹外的所有内容"
          echo "- ❌ 已排除: assets/ 文件夹（设计资源）"
          echo "- ❌ 已排除: dev/ 文件夹（开发文件）"
          echo "- ✅ 已保留: main分支的.gitignore配置"

      - name: 错误处理
        if: failure()
        run: |
          echo ""
          echo "❌ 同步过程中发生错误"
          echo "================================"
          echo "请检查上方的工作流日志以获取详细错误信息"
          echo ""
          echo "💡 常见解决方案:"
          echo "1. 检查dev分支是否有最新的更改"
          echo "2. 确认没有文件权限问题"
          echo "3. 重新运行工作流"
          echo "4. 如有持续问题，请检查仓库设置"

          # 确保回到安全状态
          git checkout main 2>/dev/null || true
